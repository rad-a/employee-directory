{"version":3,"sources":["components/EmployeeTable/index.js","components/Header/index.js","App.js","serviceWorker.js","index.js"],"names":["EmployeeTable","useState","rows","setRows","label","field","sort","width","columns","useEffect","a","axios","get","employeeList","employees","data","results","map","employee","i","name","first","last","photo","src","picture","medium","alt","phone","email","location","city","state","dob","moment","date","format","loadEmployees","hover","responsive","small","entriesOptions","sorting","entries","pagesAmount","order","Header","className","App","fluid","center","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"6SAoFeA,EA/EO,WAAO,IAAD,EACFC,mBAAS,IADP,mBACnBC,EADmB,KACbC,EADa,OAERF,mBAAS,CACzB,CACEG,MAAO,QACPC,MAAO,QACPC,KAAM,WACNC,MAAO,KAET,CACEH,MAAO,OACPC,MAAO,OACPC,KAAM,MACNC,MAAO,KAET,CACEH,MAAO,QACPC,MAAO,QACPC,KAAM,WACNC,MAAO,KAET,CACEH,MAAO,QACPC,MAAO,QACPC,KAAM,MACNC,MAAO,KAET,CACEH,MAAO,WACPC,MAAO,WACPC,KAAM,MACNC,MAAO,KAET,CACEH,MAAO,MACPC,MAAO,MACPC,KAAM,MACNC,MAAO,OAnCJC,EAFmB,oBAgE1B,OAvBAC,qBAAU,WAAM,4CACd,8BAAAC,EAAA,sEAC6BC,IAAMC,IAC/B,iDAFJ,OACQC,EADR,OAKMC,EAAYD,EAAaE,KAAKC,QAAQC,KAAI,SAACC,EAAUC,GACvD,MAAO,CACLC,KAAK,GAAD,OAAKF,EAASE,KAAKC,MAAnB,YAA4BH,EAASE,KAAKE,MAC9CC,MAAO,yBAAKC,IAAKN,EAASO,QAAQC,OAAQC,IAAI,KAC9CC,MAAOV,EAASU,MAChBC,MAAOX,EAASW,MAChBC,SAAS,GAAD,OAAKZ,EAASY,SAASC,KAAvB,aAAgCb,EAASY,SAASE,OAC1DC,IAAKC,IAAOhB,EAASe,IAAIE,MAAMC,OAAO,kBAI1CjC,EAAQW,GAhBV,4CADc,uBAAC,WAAD,wBAoBduB,KACC,IAGD,kBAAC,IAAD,CACEC,OAAK,EACLC,YAAU,EACVC,OAAK,EACLC,eAAgB,CAAC,GAAI,GAAI,GAAI,KAC7BC,QAAQ,OACRC,QAAS,GACTC,YAAa,EACbC,MAAO,CAAC,OAAQ,OAChB9B,KAAM,CAAEb,OAAMM,c,OC5DLsC,MAdf,WACE,OACE,kBAAC,IAAD,CAAQC,UAAU,UAChB,kBAAC,IAAD,CAAQA,UAAU,sCAChB,kDACA,4HCSOC,MAdf,WACE,OACE,kBAAC,IAAD,CAAcD,UAAU,YAAYE,OAAK,GACvC,kBAAC,EAAD,MAEA,kBAAC,IAAD,CAAQF,UAAU,uBAAuBG,QAAM,GAC7C,kBAAC,IAAD,KACE,kBAAC,EAAD,UCAUC,QACW,cAA7BC,OAAOtB,SAASuB,UAEe,UAA7BD,OAAOtB,SAASuB,UAEhBD,OAAOtB,SAASuB,SAASC,MACvB,2DCRNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDqHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.7d778744.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport { MDBDataTable } from \"mdbreact\";\r\nimport moment from \"moment\";\r\n\r\nconst EmployeeTable = () => {\r\n  const [rows, setRows] = useState([]);\r\n  const [columns] = useState([\r\n    {\r\n      label: \"Photo\",\r\n      field: \"photo\",\r\n      sort: \"disabled\",\r\n      width: 150\r\n    },\r\n    {\r\n      label: \"Name\",\r\n      field: \"name\",\r\n      sort: \"asc\",\r\n      width: 150\r\n    },\r\n    {\r\n      label: \"Phone\",\r\n      field: \"phone\",\r\n      sort: \"disabled\",\r\n      width: 150\r\n    },\r\n    {\r\n      label: \"Email\",\r\n      field: \"email\",\r\n      sort: \"asc\",\r\n      width: 150\r\n    },\r\n    {\r\n      label: \"Location\",\r\n      field: \"location\",\r\n      sort: \"asc\",\r\n      width: 150\r\n    },\r\n    {\r\n      label: \"DOB\",\r\n      field: \"dob\",\r\n      sort: \"asc\",\r\n      width: 150\r\n    },\r\n  ]);\r\n\r\n  useEffect(() => {\r\n    async function loadEmployees() {\r\n      const employeeList = await axios.get(\r\n        \"https://randomuser.me/api/?results=100&nat=us\"\r\n      );\r\n\r\n      let employees = employeeList.data.results.map((employee, i) => {\r\n        return {\r\n          name: `${employee.name.first} ${employee.name.last}`,\r\n          photo: <img src={employee.picture.medium} alt=\"\" />,\r\n          phone: employee.phone,\r\n          email: employee.email,\r\n          location: `${employee.location.city}, ${employee.location.state}`,\r\n          dob: moment(employee.dob.date).format(\"MM/DD/YYYY\")\r\n        }\r\n      });\r\n      \r\n      setRows(employees);\r\n    }\r\n\r\n    loadEmployees();\r\n  }, []);\r\n\r\n  return (\r\n    <MDBDataTable\r\n      hover\r\n      responsive\r\n      small\r\n      entriesOptions={[10, 25, 50, 100]}\r\n      sorting=\"true\"\r\n      entries={10}\r\n      pagesAmount={4}\r\n      order={[\"name\", \"asc\"]}\r\n      data={{ rows, columns }}\r\n    />\r\n  );\r\n};\r\n\r\nexport default EmployeeTable;\r\n","import React from \"react\";\r\nimport { MDBRow, MDBCol } from \"mdbreact\";\r\n\r\nimport \"./style.css\";\r\n\r\nfunction Header() {\r\n  return (\r\n    <MDBRow className=\"header\">\r\n      <MDBCol className=\"main-header text-center text-light\">\r\n        <h1>Employee Directory</h1>\r\n        <p>\r\n          Click on column headers to filter by heading or use the search box to\r\n          narrow your results.\r\n        </p>\r\n      </MDBCol>\r\n    </MDBRow>\r\n  );\r\n}\r\n\r\nexport default Header;\r\n","import React from \"react\";\nimport { MDBContainer, MDBRow, MDBCol } from \"mdbreact\";\nimport EmployeeTable from \"./components/EmployeeTable/index\";\nimport Header from \"./components/Header\";\n\nfunction App() {\n  return (\n    <MDBContainer className=\"px-0 mx-0\" fluid>\n      <Header />\n\n      <MDBRow className=\"px-md-2 mx-1 mx-md-3\" center>\n        <MDBCol>\n          <EmployeeTable />\n        </MDBCol>\n      </MDBRow>\n    </MDBContainer>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import \"font-awesome/css/font-awesome.min.css\";\nimport \"bootstrap-css-only/css/bootstrap.min.css\";\nimport \"mdbreact/dist/css/mdb.css\";\n\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}